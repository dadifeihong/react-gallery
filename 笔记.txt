1 nodejs和javascript的异同

在ecmascript部分node和js其实是一样的，比如数据类型定义，预防结构，内置对象  内置对象 方法
在js中的顶层对象   window
在node中顶层对象 global  
注意：node中也没有什么window对象


2  模块的使用
一个文件就是一个模块 每个模块都有自己的作用域
我们使用var来声明的一个变量 他并不是全局的，而是属于当前模块下的

//__filename: 当前文件被解析后的绝对路径  这个属性并不是全局的，而是当前模块下的

3 nodejs 中的模块加载系统
用require方法去引入需要引入的模块
路径  相对路径   require("./02.js")  这样代表加载当前目录下的文件
     绝对路径
注意：在写相对路径的时候一定要写./  如果不写表示去加载node的核心模块

4 nodejs 的查找加载机制
首先按照加载的模块的文件名称进行查找
如果没有找到，则会在摩卡文件名称后加上.js后缀进行查找
如果还没有找到，则会在文件名称后加上.json的后缀，进行查找
如果还没有，则会在问卷名称后加上.node的后缀，进行查找

查找顺序  文件名称－>.js －>.json －>.node

5 export 和module
在一个模块中通过var定义的变量，其作用域范围是当前模块，外部不能够直接的访问
如果我们想在一个模块能够访问另一个模块中定义的变量，可以：
a  把变量作为global对象的一个属性，但是这样的做法不推荐
b  使用对象 module
module对象
在这个module对象中，有一个对象：exports对象
我们可以通过这个对象把一个模块中的局部变量对象提供访问，相当于提供一个对外访问的接口
例如：  require("./02.js") 这个方法返回的就是02.js中抛出的module.exports 对象

在模块作用域，还有一个内置的模块对象，exports,他其实就是module.extports
console.log(exports === module.exports)  返回true

注意：尽量不要破坏module.extports的引用关系
例如：module.exports = [1,2,3] //这样写 exports和module.exports 的指向关系已经断开了


6 global 对象
__filename  返回当前文件被解析后的绝对路径
__dirname   返回当前文件所在目录被解析后的绝对路径
setInterval  定时器

7 process对象是一个全局对象，可以在任何地方都能访问到他，通过这个对象提供的属性和方法，使我们可以对当前运行的程序的进程
进行访问和控制
process.argv  一组包含命令行参数的数组
process.execPath  开启当前进程的绝对路径
env  返回用户环境信息
version  返回node版本信息
versions  返回node以及node依赖包版本信息
pid   当前进程的pid
title   当前进程的显示名称
arch     返回当前cpu处理器架构
platform   返回当前操作系统平台
cwd()     返回当前进程的工作目录
memoryUsage()  返回node进程的内存使用情况，单位是byte
exit(code)  退出
kill(pid)    向进程发送信息


标准输入输出流
stdin和stdout 提供了操作输入数据和输出数据的方法，我们也通常称为io操作
stdin 标准输入流
stdout 标准输出流


8 buffer 类
一个用于更好的操作二进制数据的类
我们在操作文件或者网络数据的时候，其实操作的就是二进制数据流，Node为我们提供了一个
更加方便的去操作这种数据流的类Buffer
new Buffer(size)
new Buffer(array)
new Buffer(string,[encoding]);